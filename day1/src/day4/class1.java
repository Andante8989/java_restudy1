package day4;

class Animal {
	String name;
	
	public void setName(String name) {
		this.name = name;
	}
}

public class class1 {

	public static void main(String[] args) {
		// 객체에 대하여
		// 보통 클래스는 특별한 경우가 아니라면 파일 단위로 하나씩 작성한다. 즉, 위의 경우 Animal 클래스는 Animal.java파일에
		// 단독으로 작성하는것이 일반적인 방법이다
		// 위 Animal클래스는 가장 간단한 형태의 클래스이다. 클래스의 선언만 있고 내용이 없는 껍데기뿐인 클래스이디.
		// 하지만 이 껍데기인 클래스도 아주 중요한 기능을 가지고 있다. 그 기능은 바로 객체를 만드는 기능이다.
		
		Animal cat = new Animal();
		// new는 객체를 생성할 때 사용하는 키워드이다. 이렇게 하면 Animal 클래스의 인스터스인 즉, Animal의 객체가 만들어진다.
		
		// 객체 변수
		// Animal 클래스에 name 이라는 String 변수를 추가했다. 이렇게 클래스에 선언된 변수를 객체 변수라고 한다.
		// 객체 변수는 인스턴스 변수, 멤버 변수, 속성이라고 한다.
		
		// 객체 변수를 만들었으니 이제 객체 변수를 사용해보자, 먼저 객체 변수는 변수이므로 값을 대입할 수 있다.
		// 대입하기 전에 객체 변수는 현재 어떤 값을 가지고 있는지 먼저 출력해보자
		
		
		// 위처럼 cat이라는 객체를 생성했다면 이 cat 객체의 객체 변수 name에는 다음과 같이 접근할 수 있다
		System.out.println(cat.name);  // null 출력
		// null은 값이 할당되어 있지 않은 상태를 말한다. 객체 변수로 name을 선언했지만 아무런 값도 대입을
		// 하지 않았기 때문에 null 이라는 값이 출력된 것이다.
		
		// 메소드
		// 이제 객체변수에 접근하는 방법과 현재 값이 할당되어 있지 않은 상태에 대해서 알게 되었다. 이제 객체 변수에 값을 대입하는
		// 방법에 대해서 알아보자. 객체 변수에 값을 대입하는 방법에는 여러가지가 있지만 여기서는 가장 보편적인 메소드를 이용하는 방법을 알아보자.
		// 입력 : String name
		// 출력 : void(리턴값 없음)
		// 이 문장에서 this에 대해서 이해하는 것은 꽤 중요하다. 이 문장에 대한 설명은 잠시 보류하고 일단은 우선 이 메소드를
		// 호출 하는 방법에 대해서 먼저 알아보자. 객체 변수에 접근하는 위해서 객체 변수 와 같은 도트연산자로 접근할 수 있었던 것과
		// 마찬가지로 객체가 메소드를 호출하기 위해서는 객체 메소드로 호출해야한다.
		cat.setName("boby");
		
		// 여기서 setName 메소드의 입력으로 "body"와 같은 문자열을 전달해야 한다. 왜냐하면 setName메소드는 
		// 입력항목으로 문자열을 필요로 하기 때문이다
		System.out.println(cat.name);  // boby 출력
		
		// setName 메소드 내부에 사용된 this는 Animal 클래스에 의해서 생성된 객체를 지칭한다
		// 따라서 this.name = "body";
		// cat 객체에 의해 setName 메소드를 호출하면 setName 메소드 내부에 선언된 this는 바로 cat 객체를 지칭한다
		// 따라서 cat.name = "body";
		
		// 객체 변수는 공유되지 않는다
		
		Animal dog = new Animal();
		dog.setName("happy");
		// cat객체에는 "body"라는 이름을 대입하고 dog객체에는 "happy"라는 이름을 대입했다.
		// 이렇게 하면 setName 메소드에 의해 다음과 같은 문장이 두번 실행될 것이다.
		
		// 이럴경우 dog.name = "happy" 라는 문장이 나중에 수행되므로 cat.name의 값도 "happy"라는 값으로 변경되지 않을까?
		// Animal 클래스의 객체변수 name이 cat객체와 dog객체간 서로 공유되는 변수라면 아마도 그럴것이다.
		
		
		// 결과를 보면 name 객체 변수는 공유되지 않는다는 것을 확인할 수 있따.
		// 이 부분은 정말 너무너무 중요해서 강조하고 또 강조해도 지나치지 않다. 클래스에서 가장 중요한 부분은 그 뭐라해도 이 객체 변수의
		// 값이 독립적으로 유지된다는 점이다. 사실 이 점이 바로 클래스 존재의 이유이기도 하다. 객체 지향적이라는 말의 의미도
		// 곱씹어보면 결국 이 객체 변수의 값이 독립적으로 유지되기 때문에 가능한 것이다.
		
		
		
		
		

	}

}
